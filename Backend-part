// Backend Implementation

// Step 1: Initialize Database API
app.get('/api/initialize', async (req, res) => {
  try {
    const { data } = await axios.get(
      'https://s3.amazonaws.com/roxiler.com/product_transaction.json'
    );
    await Transaction.deleteMany({});
    await Transaction.insertMany(data);
    res.json({ message: 'Database initialized successfully!' });
  } catch (error) {
    res.status(500).json({ error: 'Error initializing database' });
  }
});

// Step 2: Transactions API
app.get('/api/transactions', async (req, res) => {
  const { page = 1, perPage = 10, search = '', month } = req.query;
  const regex = new RegExp(search, 'i');
  const startOfMonth = new Date(`${month}-01`);
  const endOfMonth = new Date(`${month}-31`);

  try {
    const query = {
      dateOfSale: { $gte: startOfMonth, $lte: endOfMonth },
      $or: [
        { title: regex },
        { description: regex },
        { price: { $regex: regex } },
      ],
    };

    const transactions = await Transaction.find(query)
      .skip((page - 1) * perPage)
      .limit(Number(perPage));

    const total = await Transaction.countDocuments(query);
    res.json({ transactions, total });
  } catch (error) {
    res.status(500).json({ error: 'Error fetching transactions' });
  }
});

// Step 3: Statistics API
app.get('/api/statistics', async (req, res) => {
  const { month } = req.query;
  const startOfMonth = new Date(`${month}-01`);
  const endOfMonth = new Date(`${month}-31`);

  try {
    const salesData = await Transaction.aggregate([
      { $match: { dateOfSale: { $gte: startOfMonth, $lte: endOfMonth } } },
      {
        $group: {
          _id: null,
          totalSales: { $sum: "$price" },
          soldItems: { $sum: { $cond: ["$sold", 1, 0] } },
          unsoldItems: { $sum: { $cond: ["$sold", 0, 1] } },
        },
      },
    ]);

    res.json(salesData[0] || { totalSales: 0, soldItems: 0, unsoldItems: 0 });
  } catch (error) {
    res.status(500).json({ error: 'Error fetching statistics' });
  }
});

// Step 4: Bar Chart API
app.get('/api/bar-chart', async (req, res) => {
  const { month } = req.query;
  const startOfMonth = new Date(`${month}-01`);
  const endOfMonth = new Date(`${month}-31`);

  const priceRanges = [
    { range: '0-100', min: 0, max: 100 },
    { range: '101-200', min: 101, max: 200 },
    { range: '201-300', min: 201, max: 300 },
    { range: '301-400', min: 301, max: 400 },
    { range: '401-500', min: 401, max: 500 },
    { range: '501-600', min: 501, max: 600 },
    { range: '601-700', min: 601, max: 700 },
    { range: '701-800', min: 701, max: 800 },
    { range: '801-900', min: 801, max: 900 },
    { range: '901-above', min: 901, max: Infinity },
  ];

  try {
    const result = await Promise.all(
      priceRanges.map(async (range) => ({
        range: range.range,
        count: await Transaction.countDocuments({
          dateOfSale: { $gte: startOfMonth, $lte: endOfMonth },
          price: { $gte: range.min, $lt: range.max },
        }),
      }))
    );

    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Error fetching bar chart data' });
  }
});

// Step 5: Pie Chart API
app.get('/api/pie-chart', async (req, res) => {
  const { month } = req.query;
  const startOfMonth = new Date(`${month}-01`);
  const endOfMonth = new Date(`${month}-31`);

  try {
    const result = await Transaction.aggregate([
      { $match: { dateOfSale: { $gte: startOfMonth, $lte: endOfMonth } } },
      {
        $group: {
          _id: "$category",
          count: { $sum: 1 },
        },
      },
    ]);

    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Error fetching pie chart data' });
  }
});

// Step 6: Combined API
app.get('/api/combined', async (req, res) => {
  const { month } = req.query;

  try {
    const [transactions, statistics, barChart, pieChart] = await Promise.all([
      Transaction.find({ dateOfSale: { $gte: new Date(`${month}-01`), $lte: new Date(`${month}-31`) } }),
      Transaction.aggregate([
        { $match: { dateOfSale: { $gte: new Date(`${month}-01`), $lte: new Date(`${month}-31`) } } },
        {
          $group: {
            _id: null,
            totalSales: { $sum: "$price" },
            soldItems: { $sum: { $cond: ["$sold", 1, 0] } },
            unsoldItems: { $sum: { $cond: ["$sold", 0, 1] } },
          },
        },
      ]),
      Transaction.aggregate([
        // Add bar chart logic...
      ]),
      Transaction.aggregate([
        // Add pie chart logic...
      ]),
    ]);

    res.json({ transactions, statistics, barChart, pieChart });
  } catch (error) {
    res.status(500).json({ error: 'Error fetching combined data' });
  }
});
